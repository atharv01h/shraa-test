import { jsPDF } from 'jspdf';
import html2canvas from 'html2canvas';
import { getChatResponse } from './gemini';

export async function generateProjectReport(projectDetails: string): Promise<{ text: string; pdfUrl: string }> {
  const response = await getChatResponse(`Generate a comprehensive 7000+ word project report for: ${projectDetails}. 
Include the following detailed sections:

1. Executive Summary (500 words)
2. Introduction (800 words)
   - Project Background
   - Problem Statement
   - Project Scope
   - Project Significance
3. Literature Review (1000 words)
   - Current State of Technology
   - Similar Solutions Analysis
   - Research Gap Analysis
4. Objectives (400 words)
   - Primary Objectives
   - Secondary Objectives
   - Success Criteria
5. Methodology (1000 words)
   - Project Approach
   - Development Lifecycle
   - Tools and Technologies Selection
   - Project Planning and Timeline
6. Technology Stack (600 words)
   - Frontend Technologies
   - Backend Technologies
   - Database Architecture
   - Development Tools
   - Deployment Infrastructure
7. Implementation Details (1000 words)
   - System Architecture
   - Database Design
   - Key Features and Functionality
   - Security Measures
   - Technical Challenges and Solutions
8. Testing and Quality Assurance (600 words)
   - Testing Strategy
   - Test Cases and Scenarios
   - Performance Testing
   - Security Testing
   - Quality Metrics
9. Results and Discussion (700 words)
   - Project Outcomes
   - Performance Analysis
   - User Feedback
   - Challenges Encountered
   - Solutions Implemented
10. Future Scope (200 words)
    - Potential Enhancements
    - Scalability Considerations
11. Conclusion (200 words)
    - Project Summary
    - Key Achievements
    - Final Remarks

    Please generate a report that is at least 7,000 words, written in professional language, with technical depth and proper academic formatting. If it cannot be generated all at once, provide it in multiple parts and ensure seamless connectivity between them.`);
  
  // Create a temporary div to render the report
  const reportDiv = document.createElement('div');

  // General styling for the container
  reportDiv.style.padding = '40px'; // Sufficient padding for neat spacing
  reportDiv.style.fontFamily = 'Arial, sans-serif'; // Ensures fallback font for compatibility
  reportDiv.style.color = '#000'; // Clear and consistent text color
  reportDiv.style.backgroundColor = '#fff'; // White background for print-friendly output
  reportDiv.style.maxWidth = '850px'; // Slightly wider for improved readability
  reportDiv.style.margin = '20px auto'; // Adds vertical space around the report for better alignment
  reportDiv.style.boxShadow = '0px 4px 10px rgba(0, 0, 0, 0.1)'; // Subtle shadow for a polished look
  reportDiv.style.border = '1px solid #ccc'; // Light border for defined boundaries
  reportDiv.style.borderRadius = '8px'; // Rounded corners for a modern design
  reportDiv.style.lineHeight = '1.6'; // Better text spacing for readability
  
  
  // Add title page
  const titlePage = `
  <div style="text-align: center; margin-bottom: 80px; page-break-after: always; font-family: Arial, sans-serif;">
  <h1 style="font-size: 28px; margin-bottom: 30px;">Project Report</h1>
  <p style="font-size: 20px; margin-bottom: 50px;">${projectDetails}</p>
  <p style="font-size: 18px; margin-bottom: 10px;">Generated by Shraa AI Assistant</p>
  <p style="font-size: 18px; margin-bottom: 20px;">International Center of Excellence in Engineering and Management</p>
  <p style="font-size: 16px;">${new Date().toLocaleDateString()}</p>
    </div>
  `;
  
  // Format the response with proper styling
  const formattedContent = response
  .split('\n\n')
  .map(paragraph => {
    // Check if the paragraph is a numbered list item (e.g., "1. ...")
    if (paragraph.match(/^\d+\./)) {
      return `<h2 style="font-size: 20px; font-weight: bold; margin: 30px 0 15px; color: #000; page-break-before: always;">${paragraph}</h2>`;
    }
    // Check if the paragraph starts with a capitalized sentence and ends with punctuation (e.g., ".")
    if (paragraph.match(/^[A-Z][^.!?]*[.!?]$/)) {
      return `<h3 style="font-size: 18px; font-weight: bold; margin: 20px 0 10px; color: #000;">${paragraph}</h3>`;
    }
    // Default: treat as a standard paragraph
    return `<p style="margin: 15px 0; line-height: 1.8; text-align: justify; font-size: 14px; color: #333;">${paragraph}</p>`;
  })
  .join('');

// Combine the title page and the formatted content into the report container
reportDiv.innerHTML = titlePage + formattedContent;
document.body.appendChild(reportDiv);

  // Generate PDF with better formatting
  const canvas = await html2canvas(reportDiv);
  const pdf = new jsPDF('p', 'mm', 'a4');
  const imgData = canvas.toDataURL('image/png');
  const pdfWidth = pdf.internal.pageSize.getWidth();
  const pdfHeight = (canvas.height * pdfWidth) / canvas.width;
  
  // Add multiple pages if content exceeds page height
  const pageHeight = pdf.internal.pageSize.getHeight();
  let heightLeft = pdfHeight;
  let position = 0;
  let page = 1;

  pdf.addImage(imgData, 'PNG', 0, position, pdfWidth, pdfHeight);
  heightLeft -= pageHeight;

  while (heightLeft >= 0) {
    position = -pageHeight * page;
    pdf.addPage();
    pdf.addImage(imgData, 'PNG', 0, position, pdfWidth, pdfHeight);
    heightLeft -= pageHeight;
    page++;
  }

  const pdfBlob = pdf.output('blob');
  const pdfUrl = URL.createObjectURL(pdfBlob);

  // Clean up
  document.body.removeChild(reportDiv);

  return {
    text: "I'm excited to share that I've created a detailed project report for you! ðŸŒŸ You can download it using the button below. I've made sure to include comprehensive sections and in-depth analysis. Let me know if you'd like any adjustments! ðŸ˜Š",
    pdfUrl
  };
}